# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

orbs: 
  # https://circleci.com/developer/orbs/orb/circleci/flutter?version=1.1.0
  flutter: circleci/flutter@1.1.0
  android: circleci/android@2.0.3
  macos: circleci/macos@2.2.0

commands:
  checkout-submodules:
    steps:
      - run: 
          name: Checkout submodules
          command: |
            git submodule sync --recursive -- turf_equality
            git submodule update --recursive --init -- turf_equality

  inject-netrc-credentials:
    steps:
      - run:
          name: Configure .netrc
          command: |
            echo "machine api.mapbox.com login mapbox password ${SDK_REGISTRY_TOKEN}" >> ~/.netrc
            chmod 0600 ~/.netrc
  
  install-gcloud:
    # Link for gcloud versions: https://cloud.google.com/sdk/docs/downloads-versioned-archives#installation_instructions
    parameters:
      version:
        type: string
        default: "google-cloud-cli-405.0.0-darwin-x86_64.tar.gz"
      checksum:
        type: string
        default: "504852f8ab0c7df62f80d9d687d74c80da68f1e17ad53055fbdb37cf9bbeebc7"
    description: "Install gcloud"
    steps:
      - run:
          name: Install gcloud
          command: |
            mkdir /tmp/gcloud && cd /tmp/gcloud

            curl -OL https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/<< parameters.version >>
            echo '<< parameters.checksum >> *<< parameters.version >>' >> checksumfile
            shasum -a 256 -c checksumfile

            tar zxvf << parameters.version >>
            ./google-cloud-sdk/install.sh -q --install-python false

            echo "source /tmp/gcloud/google-cloud-sdk/path.bash.inc" >> $BASH_ENV
            echo "source /tmp/gcloud/google-cloud-sdk/completion.bash.inc" >> $BASH_ENV

  login-gcloud:
    steps:
      - run:
          name: Log in to Google Cloud Platform
          command: |
            if [[ -n "${GCLOUD_SERVICE_ACCOUNT_JSON}" ]]; then
              echo "${GCLOUD_SERVICE_ACCOUNT_JSON}" > secret.json
              gcloud auth activate-service-account --key-file secret.json --project mapbox-maps-flutter
              rm secret.json
            fi

jobs:
  build-android:
    executor:
      name: android/android-machine
      resource-class: xlarge
      tag: 2022.03.1
    steps:
      - checkout
      - checkout-submodules
      - flutter/install_sdk_and_pub:
          flutter_version: 3.3.2
      - run:
          name: ktlint
          working_directory: example/android
          command: ./gradlew ktlint
      - run:
          name: flutter format
          command: ./scripts/check-format.sh
      - run:
          name: unit test
          command: flutter test test
      - install-gcloud
      - login-gcloud
      - run:
          name: "Build Android integration tests"
          working_directory: example/android
          command: |
            flutter build apk
            ./gradlew app:assembleAndroidTest
            ./gradlew app:assembleDebug -Ptarget=integration_test/all_test.dart -Pdart-defines="${MAPBOX_ACCESS_TOKEN_BASE64}"
      - run:
          name: "Run Android integration tests on Firebase"
          working_directory: example
          command: |
            gcloud firebase test android run --type instrumentation \
              --app build/app/outputs/apk/debug/app-debug.apk \
              --test build/app/outputs/apk/androidTest/debug/app-debug-androidTest.apk \
              --timeout 5m \
              --results-dir=result_dir \
              --use-orchestrator \
              --num-flaky-test-attempts 3
            
  build-ios:
    executor: macos-xcode-latest
    steps:
      - checkout
      - checkout-submodules
      - inject-netrc-credentials
      - flutter/install_sdk_and_pub:
          flutter_version: 3.3.2
      - flutter/install_ios_pod:
          app-dir: example
      - run:
          name: swiftlint
          working_directory: ios
          command: brew install swiftlint; swiftlint lint --strict
      - run:
          name: "Build flutter wrapper for iOS"
          working_directory: example
          command: flutter build ios --simulator --no-codesign
      - run:
          name: unit test
          command: flutter test test
      # - install-gcloud
      # - login-gcloud
      # - run-firebase-benchmark-ios 
  
workflows:
  build:
    jobs:
      - build-android
      - build-ios

executors:
  macos-xcode-latest:
    resource_class: large
    macos:
      xcode: 13.3.0
