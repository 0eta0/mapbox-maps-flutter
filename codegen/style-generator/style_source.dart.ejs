<%
  const source = locals
  const name = locals.name
  const type = locals.type
  const properties = locals.properties
  const doc = locals.doc
-%>
// This file is generated.
part of mapbox_maps;

/// <%- type[`values`][Object.keys(type[`values`])[0]][`doc`] %>
/// @see [The online documentation](https://docs.mapbox.com/mapbox-gl-js/style-spec/sources/#<%- name === 'geo_json' ? 'geojson' : name %>)
class <%- camelizeWithUndercoreRemoved(name) %>Source extends Source {
   <%- camelizeWithUndercoreRemoved(name) %>Source({required super.id,
<%_ for (const property of properties) { -%>
<%_ if (property[`name`] !== '*' && property[`name`] !== 'type' && property[`type`] !== 'promoteId') { -%>
     <%- propertyDartType(property) %>? <%- camelizeWithLeadingLowercase(property.name) %>,
<%_ } -%>
<%_ } -%>
  }){
  <%_ for (const property of properties) { -%>
  <%_ if (property[`name`] !== '*' && property[`name`] !== 'type' && property[`type`] !== 'promoteId') { -%>
    _<%- camelizeWithLeadingLowercase(property.name) %> = <%- camelizeWithLeadingLowercase(property.name) %>;
  <%_ } -%>
  <%_ } -%>
  }

  @override
  String getType() => "<%- Object.keys(type[`values`])[0] -%>";

<%_ for (const property of properties) { -%>
<%_ if (property[`name`] !== '*' && property[`name`] !== 'type' && property[`type`] !== 'promoteId') { -%>

  <%- propertyDartType(property) %>? _<%- camelizeWithLeadingLowercase(property.name) %>;

  <%- blockDoc(property) %>
  Future< <%- propertyDartType(property) %>?> get <%- camelizeWithLeadingLowercase(property.name) %> async {
    return _style?.getStyleSourceProperty(id, "<%- property.name %>").then((value){
        if(value.value != '<null>') {
<%_ if (property[`type`] === 'boolean') { -%>
        if (Platform.isIOS) {
          return value.value.toLowerCase() == '1';
        } else {
          return value.value.toLowerCase() == 'true';
        }
<%_ } else if (property[`name`] === 'clusterProperties') { -%>
        return json.decode(value.value);
<%_ } else if (property[`name`] === 'bounds') { -%>
        if (Platform.isIOS){
            return (json.decode(value.value) as List)
                .cast<int>()
                .map((e) => e.toDouble())
                .toList();
        } else {
         return (json.decode(value.value) as List)
                        .cast<double>();
        }
<%_ } else { -%>
          return <%- propertyDartStylePropertyValue(property) %>;
<%_ } -%>
        } else {
            return null;
        }
    });
  }
<%_ } -%>
<%_ } -%>


<% if (name === 'geo_json') { -%>
  /// Update this GeojsonSource with a URL to a GeoJSON file, or inline GeoJSON.
  Future<void>? updateGeoJSON(String geoJson) async {
      return _style?.setStyleSourceProperty(id, "data", geoJson);
  }
<% } else if (name === 'image') {-%>
   /// Updates the image of an image style source.
   ///
   /// See [https://docs.mapbox.com/mapbox-gl-js/style-spec/#sources-image](https://docs.mapbox.com/mapbox-gl-js/style-spec/#sources-image)
   ///
   /// @param image Pixel data of the image.
   Future<void>? updateImage(MbxImage image) {
     return _style?.updateStyleImageSourceImage(id, image);
   }
<% } -%>

  @override
  String _encode(bool volatile) {
    var properties = <String, dynamic>{};

    if (volatile) {
<%_ for (const property of properties) { -%>
<%_ if (property[`name`] !== '*' && property[`name`] !== 'type' && property[`type`] !== 'promoteId') { -%>
<%_ if (property[`volatile`] === true) { -%>
    if (_<%- camelizeWithLeadingLowercase(property.name) %> != null) {
<% if (property.type === 'enum') { -%>
      properties["<%- property.name %>"] = _<%- camelizeWithLeadingLowercase(property.name) %>.toString().split('.').last.toLowerCase();
<% } else { -%>
      properties["<%- property.name %>"] = _<%- camelizeWithLeadingLowercase(property.name) %>;
<% } -%>
    }
<% } -%>
<% } -%>
<% } -%>
    } else {
      properties["id"] = id;
      properties["type"] = getType();
<%_ for (const property of properties) { -%>
<%_ if (property[`name`] !== '*' && property[`name`] !== 'type' && property[`type`] !== 'promoteId') { -%>
<%_ if (property[`volatile`] !== true) { -%>
    if (_<%- camelizeWithLeadingLowercase(property.name) %> != null) {
<% if (property.type === 'enum') { -%>
      properties["<%- property.name %>"] = _<%- camelizeWithLeadingLowercase(property.name) %>.toString().split('.').last.toLowerCase();
<% } else { -%>
      properties["<%- property.name %>"] = _<%- camelizeWithLeadingLowercase(property.name) %>;
<% } -%>
    }
<% } -%>
<% } -%>
<% } -%>
    }

    return json.encode(properties);
  }

}

// End of generated file.
