<%
  const type = locals.type
  const properties = locals.properties
  const layoutProperties = locals.layoutProperties
  const paintProperties = locals.paintProperties
  const doc = locals.doc
-%>
// This file is generated.
import 'dart:convert';
import 'package:flutter/material.dart' hide Visibility;
import 'package:flutter/services.dart';
import 'package:flutter_test/flutter_test.dart';
import 'package:integration_test/integration_test.dart';
import 'package:mapbox_maps/mapbox_maps.dart';
import 'package:mapbox_maps_example/empty_mapview.dart' as app;
import 'package:turf/helpers.dart';

void main() {
  IntegrationTestWidgetsFlutterBinding.ensureInitialized();

  Future<void> addDelay(int ms) async {
    await Future<void>.delayed(Duration(milliseconds: ms));
  }

  testWidgets('Add <%- camelize(type) %>Layer', (WidgetTester tester) async {
    final mapFuture = app.main();
    await tester.pumpAndSettle();
    final mapboxMap = await mapFuture;
    await addDelay(1000);

<% if (type === 'symbol' || type === 'circle') { -%>
    final point = Point(coordinates: Position(-77.032667, 38.913175));
    await mapboxMap.style
        .addSource(GeoJsonSource(id: "source", data: json.encode(point)));
<% } else if (type === 'fill') { -%>
    var polygon = Polygon(coordinates: [
      [
        Position(-3.363937, -10.733102),
        Position(1.754703, -19.716317),
        Position(-15.747196, -21.085074),
        Position(-3.363937, -10.733102)
      ]
    ]);
    await mapboxMap.style
        .addSource(GeoJsonSource(id: "source", data: json.encode(polygon)));
<% } else if (type === 'heatmap') { -%>
    await mapboxMap.style
        .addSource(GeoJsonSource(id: "source", data: "https://www.mapbox.com/mapbox-gl-js/assets/earthquakes.geojson"));
<% } else if (type === 'hillshade') { -%>
    await mapboxMap.style
        .addSource(RasterDemSource(id: "source", url: "mapbox://mapbox.mapbox-terrain-dem-v1"));
<% } else if (type === 'line') { -%>
    var line =
        LineString(coordinates: [Position(1.0, 2.0), Position(10.0, 20.0)]);
    await mapboxMap.style
        .addSource(GeoJsonSource(id: "source", data: json.encode(line)));
<% } else if (type === 'raster') { -%>
    await mapboxMap.style
        .addSource(RasterSource(id: "source", tileSize: 256, tiles: [
        "https://img.nj.gov/imagerywms/Natural2015?bbox={bbox-epsg-3857}" +
        "&format=image/png&service=WMS&version=1.1.1&request=GetMap&srs=EPSG:3857" +
        "&transparent=true&width=256&height=256&layers=Natural2015"]));
<% } -%>

    await mapboxMap.style.addLayer(<%- camelize(type) %>Layer(
        id: 'layer',
<% if (type === 'fill-extrusion' || type === 'model') { -%>
        sourceId: "composite",
        sourceLayer: "building",
<% } else if (withSource(type)) { -%>
        sourceId: 'source',
<% } -%>
        visibility: Visibility.NONE,
        minZoom: 1.0,
        maxZoom: 20.0,
<% for (const property of properties) { -%>
<% if (property.type !== 'formatted') { -%>
        <%- camelizeWithLeadingLowercase(property.name) %>: <%-propertyDartTestValue(property) %>,
<% } -%>
<% } -%>
        ));
    var layer = await mapboxMap.style.getLayer('layer') as <%- camelize(type) %>Layer;
<% if (type === 'fill-extrusion' || type === 'model') { -%>
    expect('composite', layer.sourceId);
<% } else if (withSource(type))  { -%>
    expect('source', layer.sourceId);
<% } -%>
    expect(layer.minZoom, 1);
    expect(layer.maxZoom, 20);
    expect(layer.visibility, Visibility.NONE);
<% for (const property of properties) { -%>
<% if (property.type !== 'formatted') { -%>
    expect(layer.<%- camelizeWithLeadingLowercase(property.name) %>,  <%-propertyDartTestValue(property) %>);
<% } -%>
<% } -%>
  });
}
// End of generated file.
