<%
serializationSpecPropertyDartType = function serializationSpecPropertyDartType(property) {
  switch (property.type) {
    case 'boolean':
      return 'bool';
    case 'number':
    case 'dimension':
      if (property.name === 'refresh-interval' || property.name === 'stale-state-timeout') {
        return 'int';
      }
      return 'double';
    case 'formatted':
      return 'Formatted';
    case 'string':
    case 'resolvedImage':
      return 'String';
    case 'image':
      return 'Uint8List';
    case 'enum':
      if (property.name === 'position') {
        return 'int'
      }
      return `${property.name ? camelize(property.name) : "String"}`;
    case 'color':
      return 'int';
    case 'array':
      if (`${serializationSpecPropertyDartType({ type: property.value })}` === "String") {
        return 'List<String?>';
      }
      if (property.name === "focal-point") {
        return 'ScreenCoordinate'
      }
      return `List<${serializationSpecPropertyDartType({ type: property.value })}?>`;
    default:
      throw new Error(`unknown type for ${property.name}`);
  }
}
%>
// This file is generated.

import 'package:pigeon/pigeon.dart';

/// Describes the coordinate on the screen, measured from top to bottom and from left to right.
/// Note: the `map` uses screen coordinate units measured in `platform pixels`.
class ScreenCoordinate {
    /// A value representing the x position of this coordinate.
    double x;
    /// A value representing the y position of this coordinate.
    double y;
}

enum OrnamentPosition { TOP_LEFT, TOP_RIGHT, BOTTOM_RIGHT, BOTTOM_LEFT }

<% for (const config of locals.configurations) {
  if (config.name !== 'resources' && config.name !== 'map' ) {
  const properties = config.properties
  const name = config.name
  const doc = config.doc
  const version = config.api_version
-%>
<% for (const property of properties) { -%>
<% if (property.type ==='enum' && property.name !== 'type' && property.name !== 'position') { -%>
<% if (property.name === 'location-puck') { -%>

<% for(const value of Object.keys(property.values)) { -%>
class <%- camelizeWithUndercoreRemoved(value) %> {
<% for(const sealed_property of Object.keys(property.values[value])) { -%>
  <%- blockDoc(property.values[value][sealed_property]) %>
  <%- serializationSpecPropertyDartType(property.values[value][sealed_property]) %>? <%- camelizeWithLeadingLowercase(sealed_property) %>;
<% } -%>
}

<% } -%>
<% } else { -%>
<%- blockDoc(property) %>
enum <%- camelize(property.name) %> {
<% for(const value of Object.keys(property.values)) { -%>
  <%- blockDocString(propertyValueDoc(property, value)) %>
  <%- snakeCaseUpper(value) %>,
<% } -%>
}
<% } -%>
<% } -%>
<% } -%>
<% for (const property of properties) { -%>
<% if (property.name === 'location-puck') { -%>
<%- blockDoc(property) %>
class LocationPuck {
<% for(const value of Object.keys(property.values)) { -%>
  <%- camelizeWithUndercoreRemoved(value) %>? <%- camelizeWithLeadingLowercaseUndercoreRemoved(value) %>;
<% } -%>
}
<% } -%>
<% } -%>  
<%- blockDocString(doc) %>
class <%- camelizeWithUndercoreRemoved(name) %>Settings {
<% for (const property of properties) { -%>
<% if (property.type === 'dimension') { -%>
  <%- blockDocString(property.doc + ' This property is specified in pixels.') %>
<% } else { -%>
  <%- blockDoc(property) %>
<% } -%>
<% if (property.name === 'position') { -%>
  OrnamentPosition? <%- camelizeWithLeadingLowercase(property.name) %>;
<% } else { -%>
  <%- serializationSpecPropertyDartType(property) %>? <%- camelizeWithLeadingLowercase(property.name) %>;
<% } -%>
<% } -%>
}

<%- blockDocString(doc) %>
@HostApi
abstract class <%- camelizeWithUndercoreRemoved(name) %>SettingsInterface {
  <%- camelizeWithUndercoreRemoved(name) %>Settings getSettings();
  void updateSettings(<%- camelizeWithUndercoreRemoved(name) %>Settings settings);
}
<% } -%>
<% } -%>
// End of generated file.