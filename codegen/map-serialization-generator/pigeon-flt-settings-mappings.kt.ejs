<%
  const properties = locals.properties
  const name = locals.name
  const doc = locals.doc
  const version = locals.api_version

  function mapToKotlinProperty(property) {
    switch (serializationSpecPropertyKotlinType(property)) {
      case 'Float':
        return 'it.toFloat()';
      case 'Int':
        return 'it.toInt()';
      case 'array':
        return 'it.map { it.toFloat() }';
      case 'Drawable':
        return 'BitmapDrawable(context.resources, BitmapFactory.decodeByteArray(it, 0, it.size))';
      case 'ScreenCoordinate':
        return 'ScreenCoordinate(it.x, it.y)';
      case 'List<Float>':
        return 'it.map { it.toFloat() }';
      default:
        if (property.name === 'position') {
          return 'it.toInt()'
        }
        return 'it';
    }
  }

  function mapToDartProperty(property) {
    switch (serializationSpecPropertyKotlinType(property)) {
      case 'Float':
        return '.toDouble()';
      case 'Int':
        return '.toLong()';
      case 'array':
        return '.map { it.toDouble() }';
      case 'Drawable':
        return '.BitmapDrawable(context.resources, BitmapFactory.decodeByteArray(it, 0, it.size))';
      case 'ScreenCoordinate':
        return '.ScreenCoordinate(it.x, it.y)';
      case 'List<Float>':
        return '.map { it.toDouble() }';
      default:
        if (property.name === 'position') {
          return 'it.Long()'
        }
        return '';
    }
  }

  function toDartDrawable(name) {
    return `(${camelizeWithLeadingLowercase(name)} as? BitmapDrawable)?.let { drawable ->
          ByteArrayOutputStream().also { stream ->
            drawable.bitmap.compress(Bitmap.CompressFormat.PNG, 100, stream)
          }.toByteArray()
        }`.trim()
  }
-%>
// This file is generated.
package com.mapbox.maps.mapbox_maps.mapping

import android.content.Context
import android.graphics.Bitmap
import android.graphics.BitmapFactory
import android.graphics.drawable.BitmapDrawable
import com.mapbox.maps.pigeons.FLTSettings
<% if (name === 'location_component') { -%>
import com.mapbox.maps.plugin.<%- removeUnderScore(name) %>.generated.<%- camelizeWithUndercoreRemoved(name) %>SettingsInterface2
<% } else { -%>
import com.mapbox.maps.plugin.<%- removeUnderScore(name) %>.generated.<%- camelizeWithUndercoreRemoved(name) %>SettingsInterface
<% } -%>
<% if (name === 'gestures') { -%>
import com.mapbox.maps.ScreenCoordinate
import com.mapbox.maps.plugin.ScrollMode
<% } else if (name === 'location_component') { -%>
import com.mapbox.maps.plugin.LocationPuck2D
import com.mapbox.maps.plugin.LocationPuck3D
import com.mapbox.maps.plugin.PuckBearingSource
<% } -%>
import java.io.ByteArrayOutputStream

<% if (name === 'location_component') { -%>
fun <%- camelizeWithUndercoreRemoved(name) %>SettingsInterface2.applyFromFLT(settings: FLTSettings.<%- camelizeWithUndercoreRemoved(name) %>Settings, context: Context) {
<% } else { -%>
fun <%- camelizeWithUndercoreRemoved(name) %>SettingsInterface.applyFromFLT(settings: FLTSettings.<%- camelizeWithUndercoreRemoved(name) %>Settings, context: Context) {
<% } -%>
<% for (const property of properties) { -%>
<% if (property.name === 'location-puck') { -%>
  settings.locationPuck?.let {
    val puck2D = it.locationPuck2D
    val puck3D = it.locationPuck3D
    locationPuck = if (puck3D != null) {
      LocationPuck3D(
        puck3D.modelUri!!
      ).apply {
<% for(const puck_property_name of Object.keys(property.values['location_puck_3_d'])) { -%>
        puck3D.<%- camelizeWithLeadingLowercase(puck_property_name) %>?.let { <%- camelizeWithLeadingLowercase(puck_property_name) %> = <%- mapToKotlinProperty(property.values['location_puck_3_d'][puck_property_name]) %> }
<% } -%>
      }
    } else {
      LocationPuck2D().apply {
<% for(const puck_property_name of Object.keys(property.values['location_puck_2_d'])) { -%>
        puck2D?.<%- camelizeWithLeadingLowercase(puck_property_name) %>?.let { <%- camelizeWithLeadingLowercase(puck_property_name) %> = <%- mapToKotlinProperty(property.values['location_puck_2_d'][puck_property_name]) %> }
<% } -%>
      }
    }
  }
<% } else if (property.type === 'enum' && property.name !== 'position') { -%>
  settings.<%- camelizeWithLeadingLowercase(property.name) %>?.let {
    <%- camelizeWithLeadingLowercase(property.platformName) %> = <%- camelize(property.platformName) %>.values()[it.ordinal]
  }
<% } else if (property.name === 'position') { -%>
   settings.<%- camelizeWithLeadingLowercase(property.name) %>?.let { <%- camelizeWithLeadingLowercase(property.platformName) %> = it.toPosition() }
<% } else { -%>
  settings.<%- camelizeWithLeadingLowercase(property.name) %>?.let { <%- camelizeWithLeadingLowercase(property.platformName) %> = <%- mapToKotlinProperty(property) %> }
<% } -%>
<% } -%>
}

<% if (name === 'location_component') { -%>
fun <%- camelizeWithUndercoreRemoved(name) %>SettingsInterface2.toFLT() = FLTSettings.<%- camelizeWithUndercoreRemoved(name) %>Settings.Builder().let { settings ->
<% } else { -%>
fun <%- camelizeWithUndercoreRemoved(name) %>SettingsInterface.toFLT() = FLTSettings.<%- camelizeWithUndercoreRemoved(name) %>Settings.Builder().let { settings ->
<% } -%>
<% for (const property of properties) { -%>
<% if (serializationSpecPropertyKotlinType(property) === 'Drawable') { -%>
  settings.set<%- camelize(property.name) %>(
    <%- toDartDrawable(property.name) %>
  )
<% } else if (serializationSpecPropertyKotlinType(property) === 'ScreenCoordinate') { -%>
  <%- camelizeWithLeadingLowercase(property.name) %>?.let {
    FLTSettings.ScreenCoordinate.Builder().setX(it.x).setY(it.y).build()
  }
<% } else if (property.name === 'location-puck') { -%>
  settings.setLocationPuck(FLTSettings.LocationPuck().also {
    (locationPuck as? LocationPuck2D)?.let { puck2D ->
      it.locationPuck2D = FLTSettings.LocationPuck2D().also {
<% for(const [puck_property_name, puck_property] of Object.entries(property.values['location_puck_2_d'])) { -%>
<% if (serializationSpecPropertyKotlinType(puck_property) === 'Drawable') { -%>
        it.<%- camelizeWithLeadingLowercase(puck_property_name) %> = <%- toDartDrawable(`puck2D.${puck_property_name}`) %>
<% } else { -%>
        it.<%- camelizeWithLeadingLowercase(puck_property_name) %> = puck2D.<%- camelizeWithLeadingLowercase(puck_property_name) %><%- mapToDartProperty(puck_property) %>
<% } -%>
<% } -%>
      }
    }
    (locationPuck as? LocationPuck3D)?.let { puck3D ->
      it.locationPuck3D = FLTSettings.LocationPuck3D().also {
<% for(const puck_property_name of Object.keys(property.values['location_puck_3_d'])) { -%>
        it.<%- camelizeWithLeadingLowercase(puck_property_name) %> = puck3D.<%- camelizeWithLeadingLowercase(puck_property_name) %><%- mapToDartProperty(property.values['location_puck_3_d'][puck_property_name]) %>
<% } -%>
      }
    }
  })
<% } else if (property.type === 'enum' && property.name !== 'position') { -%>
  settings.set<%- camelize(property.name) %>(FLTSettings.<%- camelize(property.platformName) %>.values()[<%- camelizeWithLeadingLowercase(property.platformName) %>.ordinal])
<% } else if (property.name === 'position') { -%>
  settings.set<%- camelize(property.name) %>(position.toOrnamentPosition())
<% } else { -%>
  settings.set<%- camelize(property.name) %>(<%- camelizeWithLeadingLowercase(property.platformName) %><%- mapToDartProperty(property) %>)
<% } -%>
<% } -%>
  settings.build()
}

// End of generated file.