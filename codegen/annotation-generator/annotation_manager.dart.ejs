<%
  const type = locals.type
  const orignalType = locals.orignalType
  const properties = locals.properties
  const doc = locals.doc
  const symbol = "pointAnnotation"
  const circle = "circleAnnotation"
  const fill = "polygonAnnotation"
  const line = "polylineAnnotation"
-%>
// This file is generated.
part of mapbox_maps;

/// The <%- camelize(type) %>Manager to add/update/delete <%- camelize(type) %>Annotations on the map.
class <%- camelize(type) %>Manager extends BaseAnnotationManager {
  <%- camelize(type) %>Manager({required String id}) : super(id: id);

  final _<%- camelize(type) %>Messager messager = _<%- camelize(type) %>Messager();

  /// Add a listener to receive the callback when an annotation is clicked.
  void addOn<%- camelize(type) %>ClickListener(On<%- camelize(type) %>ClickListener listener) {
    On<%- camelize(type) %>ClickListener.setup(listener);
  }

  /// Create a new annotation with the option.
  Future<<%- camelize(type) %>> create(<%- camelize(type) %>Options annotation) =>
      messager.create(id, annotation);

  /// Create multi annotations with the options.
  Future<List<<%- camelize(type) %>?>> createMulti(List<<%- camelize(type) %>Options> annotations) =>
      messager.createMulti(id, annotations);

  /// Update an added annotation with new properties.
  Future<void> update(<%- camelize(type) %> annotation) => messager.update(id, annotation);

  /// Delete an added annotation.
  Future<void> delete(<%- camelize(type) %> annotation) => messager.delete(id, annotation);

  /// Delete all the annotation added by this manager.
  Future<void> deleteAll() => messager.deleteAll(id);

<%_ for (const property of properties) { _%>
<%_ if (!supportsPropertyFunction(property) && !shouldSkipAnnotationProperty(type, property)) { _%>

  /// <%- markdownFriendlyDoc(property) %>
  Future<void> set<%- camelize(property.name) %>(<%- propertyDartType(property) %> <%- camelizeWithLeadingLowercase(property.name) %>)
    => messager.set<%- camelize(property.name) %>(id, <%- camelizeWithLeadingLowercase(property.name) %>);

  /// <%- markdownFriendlyDoc(property) %>
  Future<<%- propertyDartType(property) %>?> get<%- camelize(property.name) %>()
<% if (property.type === 'enum') { -%>
    => messager.get<%- camelize(property.name) %>(id).then((value) => value != null ? <%- propertyDartType(property) %>.values[value] : null);
<% } else { -%>
    => messager.get<%- camelize(property.name) %>(id);
<% } -%>
<%_ } _%>
<%_ } _%>
}
// End of generated file.
