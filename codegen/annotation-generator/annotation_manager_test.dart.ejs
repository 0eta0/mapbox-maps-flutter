<%
  const type = locals.type
  const orignalType = locals.orignalType
  const properties = locals.properties
  const doc = locals.doc
  const symbol = "pointAnnotation"
  const circle = "circleAnnotation"
  const fill = "polygonAnnotation"
  const line = "polylineAnnotation"
-%>
// This file is generated.
import 'package:flutter/material.dart';
import 'package:flutter_test/flutter_test.dart';
import 'package:integration_test/integration_test.dart';
import 'package:mapbox_maps/mapbox_maps.dart';
import 'package:mapbox_maps_example/empty_mapview.dart' as app;
import 'package:turf/helpers.dart';

void main() {
  IntegrationTestWidgetsFlutterBinding.ensureInitialized();

  Future<void> addDelay(int ms) async {
    await Future<void>.delayed(Duration(milliseconds: ms));
  }

  testWidgets('create <%- camelize(type)-%>_manager ', (WidgetTester tester) async {
    final mapFuture = app.main();
    await tester.pumpAndSettle();
    final mapboxMap = await mapFuture;
    final manager = await mapboxMap.annotations.create<%- camelize(type) -%>Manager();
    await addDelay(1000);
<%_ for (const property of properties) { _%>
<%_ if (!supportsPropertyFunction(property) && !shouldSkipAnnotationProperty(type, property)) { _%>

    await manager.set<%- camelize(property.name) %>(<%- propertyDartTestValue(property) %>);
    var <%- camelizeWithLeadingLowercase(property.name) %> = await manager.get<%- camelize(property.name) %>();
    expect(<%- propertyDartTestValue(property) %>, <%- camelizeWithLeadingLowercase(property.name) %>);
<%_ } _%>
<%_ } _%>
    await addDelay(1000);
  });
}
// End of generated file.