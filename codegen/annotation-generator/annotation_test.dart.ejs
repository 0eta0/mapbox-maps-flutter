<%
  const type = locals.type
  const orignalType = locals.orignalType
  const properties = locals.properties
  const doc = locals.doc
  const symbol = "pointAnnotation"
  const circle = "circleAnnotation"
  const fill = "polygonAnnotation"
  const line = "polylineAnnotation"
-%>
// This file is generated.
import 'package:flutter/material.dart';
import 'package:flutter_test/flutter_test.dart';
import 'package:integration_test/integration_test.dart';
import 'package:mapbox_maps/mapbox_maps.dart';
import 'package:mapbox_maps_example/empty_mapview.dart' as app;
import 'package:turf/helpers.dart';

void main() {
  IntegrationTestWidgetsFlutterBinding.ensureInitialized();

  Future<void> addDelay(int ms) async {
    await Future<void>.delayed(Duration(milliseconds: ms));
  }

  testWidgets('create <%- camelize(type) -%>', (WidgetTester tester) async {
    final mapFuture = app.main();
    await tester.pumpAndSettle();
    final mapboxMap = await mapFuture;
    final manager = await mapboxMap.annotations.create<%- camelize(type) -%>Manager();
<% if (type === circle || type === symbol) { -%>
    var geometry = Point(coordinates: Position(1.0, 2.0));
<% } else if (type === line) { -%>
    var geometry = LineString(coordinates: [ Position( 1.0, 2.0), Position( 10.0, 20.0) ]);
<% } else { -%>
    var geometry = Polygon(coordinates: [ [ Position(-3.363937, -10.733102), Position(1.754703, -19.716317), Position(-15.747196, -21.085074), Position(-3.363937, -10.733102) ] ]);
<% } -%>

    var <%- camelizeWithLeadingLowercase(type) %>Options = <%- camelize(type) -%>Options(
      geometry: geometry.toJson(),
<% for (const property of properties) { -%>
<% if (supportsPropertyFunction(property)) { -%>
      <%- camelizeWithLeadingLowercase(property.name) %>: <%-propertyDartTestValue(property) %>,
<% } -%>
<% } -%>
    );
    final annotation = await manager.create(<%- camelizeWithLeadingLowercase(type) %>Options);
<% if (type === circle || type === symbol) { -%>
    var point = Point.fromJson((annotation.geometry)!.cast());
    expect(1.0, point.coordinates.lng);
    expect(2.0, point.coordinates.lat);
<% } else if (type === line) { -%>
    var lineString = LineString.fromJson((annotation.geometry)!.cast());
    var points = lineString.coordinates;
    expect(2, points.length);
    expect(1.0, points.first.lng);
    expect(2.0, points.first.lat);
    expect(10.0, points.last.lng);
    expect(20.0, points.last.lat);
<% } else { -%>
    var polygon = Polygon.fromJson((annotation.geometry)!.cast());
    expect(1, polygon.coordinates.length);
    var points = polygon.coordinates.first;
    expect(4, points.length);
    expect(-3.363937, points.first.lng);
    expect(-10.733102, points.first.lat);
    expect(-3.363937, points.last.lng);
    expect(-10.733102, points.last.lat);
<% } -%>
<% for (const property of properties) { -%>
<% if (supportsPropertyFunction(property)) { -%>
    expect(<%-propertyDartTestValue(property) %>, annotation.<%- camelizeWithLeadingLowercase(property.name) %>);
<% } -%>
<% } -%>
  });

  testWidgets('update and delete <%- camelize(type) -%>', (WidgetTester tester) async {
    final mapFuture = app.main();
    await tester.pumpAndSettle();
    final mapboxMap = await mapFuture;
    final manager = await mapboxMap.annotations.create<%- camelize(type) -%>Manager();
<% if (type === circle || type === symbol) { -%>
    var geometry = Point(coordinates: Position(1.0, 2.0));
<% } else if (type === line) { -%>
    var geometry = LineString(coordinates: [ Position( 1.0, 2.0), Position( 10.0, 20.0) ]);
<% } else { -%>
    var geometry = Polygon(coordinates: [ [ Position(-3.363937, -10.733102), Position(1.754703, -19.716317), Position(-15.747196, -21.085074), Position(-3.363937, -10.733102) ] ]);
<% } -%>

    var <%- camelizeWithLeadingLowercase(type) %>Options = <%- camelize(type) -%>Options(
      geometry: geometry.toJson(),
    );
    final annotation = await manager.create(<%- camelizeWithLeadingLowercase(type) %>Options);
<% if (type === circle || type === symbol) { -%>
    var point = Point.fromJson((annotation.geometry)!.cast());
    var newPoint = Point( coordinates: Position(point.coordinates.lng + 1.0, point.coordinates.lat + 1.0));
    annotation.geometry = newPoint.toJson();
<% } else if (type === line) { -%>
    var lineString = LineString.fromJson((annotation.geometry)!.cast());
    var newlineString = LineString( coordinates: lineString.coordinates .map((e) => Position(e.lng + 1.0, e.lat + 1.0)) .toList());
    annotation.geometry = newlineString.toJson();
<% } else { -%>
    var polygon = Polygon.fromJson((annotation.geometry)!.cast());
    var newPolygon = Polygon( coordinates: polygon.coordinates .map((e) => e.map((e) => Position(e.lng + 1.0, e.lat + 1.0)).toList()) .toList());
    annotation.geometry = newPolygon.toJson();
<% } -%>
    await manager.update(annotation);
    await manager.delete(annotation);

    for (var i = 0; i < 10; i++) {
      await manager.create(<%- camelizeWithLeadingLowercase(type) %>Options);
    }

    await manager.deleteAll();
    await addDelay(1000);
  });
}
// End of generated file.